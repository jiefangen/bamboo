<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="org.panda.business.admin.modules.workflow.dao.TodoDao">
    <sql id="todoColumns">id, work_status, content, sort, user_id, create_time, update_time </sql>

    <resultMap id="baseTodoMap" type="org.panda.business.admin.modules.workflow.model.WorkTodo">
        <id column="id" property="id" jdbcType="VARCHAR"/>
        <result column="work_status" property="workStatus" jdbcType="INTEGER"/>
        <result column="content" property="content" jdbcType="VARCHAR"/>
        <result column="sort" property="sort" jdbcType="INTEGER"/>
        <result column="create_time" property="createTime" jdbcType="TIMESTAMP"/>
        <result column="update_time" property="updateTime" jdbcType="TIMESTAMP"/>
    </resultMap>

    <select id="findTodo" resultMap="baseTodoMap">
        SELECT
        <include refid="todoColumns"/>
        FROM work_todo
        WHERE user_id = #{userId} and work_status = #{workStatus}
        ORDER BY sort ASC
    </select>

    <update id="sortTodo">
        update work_todo
            set work_status = #{todo.workStatus},
                `sort` = #{todo.sort}
        where `id` = #{todo.id} and user_id = #{userId}
    </update>

    <insert id="insertTodo">
        insert into work_todo (<include refid="todoColumns"/>)
            values (#{todo.id},
                   #{todo.workStatus},
                   #{todo.content},
                   (select IFNULL(sort, 0) from
                        (select (max(distinct sort) + 1) as sort from
                            work_to_do where user_id = #{todo.userId}
                            and work_status = #{todo.workStatus}
                        ) as t
                   ),
                   #{todo.userId},
                   #{todo.updateTime},
                   #{todo.updateTime})
    </insert>

    <delete id="deleteTodo">
        delete from work_todo where id = #{todo.id} and user_id = #{todo.userId} and work_status = #{todo.workStatus}
    </delete>

    <update id="updateTodo">
        update work_todo
        set content = #{todo.content},
            update_time = #{todo.updateTime}
        where `id` = #{todo.id} and user_id = #{todo.userId}
    </update>

    <!-- '<='替换&lt;= '>='替换&gt;= -->
    <delete id="deleteTodoByTime">
        delete from work_todo where work_status = 4 and update_time &lt; NOW() - INTERVAL #{intervalDay} DAY
    </delete>
</mapper>